{"version":3,"sources":["../src/app.js"],"names":["dotenv","config","app","use","bodyParser","urlencoded","extended","json","nunjucks","configure","autoescape","express","set","path","join","process","cwd","corsOptions","origin","methods","preflightContinue","optionsSuccessStatus","globalRouter","get","req","res","next","err","Error","ip","originalUrl","statusCode","error","status","body","url","message","format","render","type","send","PORT","env","NODE_ENV","listen","console","log"],"mappings":"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","sourcesContent":["import path from 'path';\nimport express from 'express';\nimport bodyParser from 'body-parser';\nimport nunjucks from 'nunjucks';\nimport dotenv from 'dotenv';\nimport cors from 'cors';\n \nimport passportConfig from './config/passport';\nimport globalRouter from './routes';\n\nimport 'core-js/stable';\nimport 'regenerator-runtime/runtime';\n\n// Read .env settings\ndotenv.config();\n\n/*\nFast, unopinionated, minimalist web framework for node.\nhttps://www.npmjs.com/package/express\n\nInitalize the express application\n*/\nconst app = express();\n\n/*\nNode.js body parsing middleware\n\nParse incoming request bodies in a middleware before your handlers, available under the req.body property.\nhttps://www.npmjs.com/package/body-parser\n*/\n\n// Parse application/x-www-form-urlencoded\napp.use(bodyParser.urlencoded({ \n  extended: false,\n}));\n// Parse application/json\napp.use(bodyParser.json());\n// Set default view engine\nnunjucks.configure('views', {\n  autoescape: true,\n  express: app,\n});\napp.set('view engine', 'html');\n// Serve static content\napp.use(express.static(path.join(process.cwd(), '..', 'client', 'build')));\n\n/*\nPassport\n*/\npassportConfig(app);\n\n/*\nCors parsing middleware\n\ncors is a node.js package for providing a Connect/Express middleware that can be used to enable CORS with various options.\nhttps://www.npmjs.com/package/cors\n*/\nconst corsOptions = {\n  origin: '*',\n  methods: 'GET,HEAD,PUT,PATCH,POST,DELETE',\n  preflightContinue: false,\n  optionsSuccessStatus: 204,\n};\napp.use(cors(corsOptions));\n\n/*\nAdd all routers to Express app\n\nAll routes (paths) are registered\n*/\napp.use('/', globalRouter);\n\n/*\nNot Found routes\n*/\napp.get('*', (req, res, next) => {\n  const err = new Error(\n    `${req.ip} tried to access ${req.originalUrl}`,\n  );\n  err.statusCode = 301;\n  next(err);\n});\n\n/*\nError Handler\n*/\napp.use((err, req, res, next) => {\n  const error = err;\n  error.statusCode = error.statusCode || 500;\n  res.status(error.statusCode);\n\n  const body = {\n    url: req.url,\n    error: {\n      message: error.message,\n      statusCode: error.statusCode,\n    },\n  };\n\n  res.format({\n    'application/json': () => {\n      res.json(body);\n    },\n    'text/html': () => {\n      res.render('error', body);\n    },\n    default: () => {\n      res.type('text/plain').send('You have to accept application/json or text/html!');\n    },\n  });\n\n  next();\n});\n\n// Set the port used by the server\nconst PORT = process.env.PORT || 8080;\n\n// Set the Node environment\nconst NODE_ENV = process.env.NODE_ENV || 'development';\n\n// Express js listen method to run project on http://localhost:3000\napp.listen(PORT, () => {\n  console.log(`Application is running in ${NODE_ENV} mode on port ${PORT}`);\n});\n"],"file":"app.js"}