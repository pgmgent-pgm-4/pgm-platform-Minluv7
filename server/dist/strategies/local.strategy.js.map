{"version":3,"sources":["../../src/strategies/local.strategy.js"],"names":["localStrategy","queryGetUserByUsername","mutationCreateUser","client","AwesomeGraphQLClient","endpoint","settings","HYGRAPH_CONTENT_API","fetch","fetchOptions","headers","Authorization","HYGRAPH_ACCESS_TOKEN","passport","use","Strategy","usernameField","passwordField","username","password","done","request","authUser","HTTPError","userPayload","id","userName","email","token","jwt","sign","user","JWT_SECRET","expiresIn","JWT_EXPIRE","authenticated","passReqToCallback","req","body","createAuthUser"],"mappings":"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","sourcesContent":["// Import external modules\nimport passport from 'passport';\nimport { Strategy } from 'passport-local';\nimport { AwesomeGraphQLClient } from 'awesome-graphql-client';\nimport fetch from 'node-fetch';\nimport jwt from 'jsonwebtoken';\n\n// Import custom modules\nimport settings from '../config/settings';\nimport { HTTPError } from '../utils';\n\nconst localStrategy = () => {\n  const queryGetUserByUsername = `\n    query getUserByUsername($username: String!) {\n      authUser(where: { userName: $username }) {\n        id,\n        userName,\n        email,\n        password\n      }\n    }\n  `;\n\n  const mutationCreateUser = `\n  mutation CreateAuthUser($username: String = \"\", $password: String = \"\", $email: String = \"\") {\n      createAuthUser(data: {userName: $username, password: $password, email: $email}) {\n        id\n        password\n        userName\n        email\n      }\n    }\n  `;\n\n  const client = new AwesomeGraphQLClient({\n    endpoint: `${settings.HYGRAPH_CONTENT_API}`,\n    fetch,\n    fetchOptions: {\n      headers: {\n        Authorization: `Bearer ${settings.HYGRAPH_ACCESS_TOKEN}`,\n      },\n    },\n  });\n\n  passport.use('login', new Strategy(\n    {\n      usernameField: 'username',\n      passwordField: 'password',\n    },\n    async (username, password, done) => {\n      try {\n        const { authUser } = await client.request(queryGetUserByUsername, { username });\n\n        if (!authUser) {\n          throw new HTTPError('User does no exists', 404);\n        }\n\n        if (password !== authUser.password) {\n          throw new HTTPError('Incorrect Credentials', 404);\n        }\n\n        const userPayload = {\n          id: authUser.id,\n          username: authUser.userName,\n          email: authUser.email,\n        };\n\n        const token = jwt.sign({ user: userPayload }, settings.JWT_SECRET, {\n          expiresIn: settings.JWT_EXPIRE,\n        });\n\n        const authenticated = {\n          ...userPayload,\n          token,\n        };\n\n        done(null, authenticated);\n      } catch (error) {\n        done(error);\n      }\n    },\n  ));\n\n  passport.use('signup', new Strategy(\n    {\n      usernameField: 'username',\n      passwordField: 'password',\n      passReqToCallback: true,\n    },\n    async (req, username, password, done) => {\n      try {\n        // Get all the signup fields\n        const { email } = req.body;\n\n        // Create the AuthUser in Hygraph\n        const { createAuthUser } = await client.request(mutationCreateUser, { username, password, email });\n\n        // Error\n        if (!createAuthUser) {\n          throw new HTTPError(`Can't create the user with username: ${username}`, 404);\n        }\n\n        const userPayload = {\n          id: createAuthUser.id,\n          username: createAuthUser.userName,\n          email: createAuthUser.email,\n        };\n\n        const token = jwt.sign({ user: userPayload }, settings.JWT_SECRET, {\n          expiresIn: settings.JWT_EXPIRE,\n        });\n\n        const authenticated = {\n          ...userPayload,\n          token,\n        };\n\n        done(null, authenticated);\n      } catch (error) {\n        done(error);\n      }\n    },\n  ));\n};\n\nexport default localStrategy;\n"],"file":"local.strategy.js"}